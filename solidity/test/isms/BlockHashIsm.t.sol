// SPDX-License-Identifier: MIT or Apache-2.0
pragma solidity ^0.8.13;

import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";

import {BlockHashISM} from "../../contracts/isms/blockHash/BlockHashISM.sol";
import {MockBlockHashOracle} from "../../contracts/mock/MockBlockHashOracle.sol";

contract BlockHashIsmTest is Test {
    BlockHashISM ism;
    MockBlockHashOracle blockHashOracle;

    function setUp() public {
        blockHashOracle = new MockBlockHashOracle();
        ism = new BlockHashISM(address(blockHashOracle));
    }

    function test_first() public {
        uint256 blockHeight = 0x689180;
        bytes32 blockHash = hex"06a65d4f78ba029d07f7fb6add752a3f7bfe71821f85e65ae8c2691097e6c6e6"; // keccak256(blockHeaderRlp);
        blockHashOracle.setBlockHash(blockHeight, blockHash);

        bytes
            memory mptKey = hex"5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2";
        bytes
            memory proof = hex"f8eff8718080808080a04d722e20a2922c41333b6578efd5f49711e555d47d8aad3b0f6e73c021e6215da06e1b969c5e4077b832a3ecea17f3bca44925428f9acf920473a647e795c16b028080808080808080a0801bcf64f2b9b720443b1c4946f4cf20bd70ea38887bc7ab784c9f448c0f040f80f851808080808080a00d9ef166d198fc339e476486ff42912311650d76a7ad64123997c59b5f40563b8080808080808080a04dff67b22191c3c04f2192407f4aaa15bcd43cfeb31ea9dd407904d1b39de79380e8a020e7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd286746573756532";
        bytes
            memory blockHeaderRlp = hex"f90258a0a8f9eac58229c704d7c04723e5e38ab2dcd21cf61130b3645e5fdd1e8462d5a9a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794c6e2459991bfe27cca6d86722f35da23a1e4cb97a04fa8f1eb80299bc4ab5ff8b18b88bb775aea2c9f5849f64368a05b222d3b0390a00ec74dd216b79b3be94a7e3c3acb495633257e38dbf673ef9f28650a0081667aa004819b6ba679b337f16987b4bb8a271f15238c9738291fa3a181376c6fbb5bc7b90100000000004408c0908010000a0a00200800008108000380048001880014200044088180000084001004001000210400888410000200000400000330042400081400080000000440424000000a000000400412080204001000000008020000181200100000020020c10022060010202b00000800c0000048200100021c00440001022081400080210020000100012000c00001cc0000400200400100000c00100022080800000040010a0100040101000c06064028000410010280002200020520810210020000120001400008da024000604c0408000280010102402000102008000040046108200060001000200000040000000008000002040008004855000480836891808401c9c3808398ce4e846708619891726574682f76312e302e382f6c696e7578a0a6c1b47a6c50f8d7e7bedfff90c48e1e24a1fac59ed6c46b2f603f8eece076f188000000000000000084126f5271a020c745115d6bf1c08333ff38c1a535ca27869af7bedd7483f63e4ffa40af629f8304000080a0fc181402f70616d31c2b540f1a2d7d411f0224ea24b8f3e753282f8dd0d9ae21";

        bytes memory metadata = (abi.encode(mptKey, proof, blockHeaderRlp));
        bytes memory message = hex"746573756532";

        bool res = ism.verify(metadata, message);
        console.log(res);
    }

    // function test_reader() public {
    //     bytes memory rlpString = hex"f8718080808080a04d722e20a2922c41333b6578efd5f49711e555d47d8aad3b0f6e73c021e6215da06e1b969c5e4077b832a3ecea17f3bca44925428f9acf920473a647e795c16b028080808080808080a0801bcf64f2b9b720443b1c4946f4cf20bd70ea38887bc7ab784c9f448c0f040f80";
    //     ism.rlpReader(rlpString);
    // }
}
