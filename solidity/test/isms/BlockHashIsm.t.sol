// SPDX-License-Identifier: MIT or Apache-2.0
pragma solidity ^0.8.13;

import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";

import {BlockHashISM} from "../../contracts/isms/blockHash/BlockHashISM.sol";
import {MockBlockHashOracle} from "../../contracts/mock/MockBlockHashOracle.sol";
import {RLPWriter} from "../../contracts/libs/RLPWriter.sol";

contract BlockHashIsmTest is Test {
    BlockHashISM ism;
    MockBlockHashOracle blockHashOracle;

    function setUp() public {
        blockHashOracle = new MockBlockHashOracle();
        ism = new BlockHashISM(address(blockHashOracle));
    }

    function test_first() public {
        uint256 blockHeight = 0x689180;
        bytes32 blockHash = hex"06a65d4f78ba029d07f7fb6add752a3f7bfe71821f85e65ae8c2691097e6c6e6"; // keccak256(blockHeaderRlp);
        blockHashOracle.setBlockHash(blockHeight, blockHash);

        bytes memory mptKey = RLPWriter.writeUint(19);
        bytes
            memory proof = hex"f9055cb873f871a0af1e7e6597c0e2f217105a8ea47d104bfa9c16f380f89eb1764b2af8ed399b5ca0693d4010d81af2ed3b076945ecf33976111d5ac34a19f75e89d4877ac870aa4c808080808080a009bde0254fccaec6fb07457bad8f157ec406255a3bead41dfd19d9ac4a3eb2748080808080808080b901b4f901b1a04bba6720f32c7f975c070f813834bedd618e38410b7d784ff08d89c5c3741b09a02334b69184794f84fd58278c0f43baeb5f645ea946e3e15a9e941fb2ab756d61a0bfe63531f80cda73a4ddd46fb1c8f0e520fdda171852645871aa6e6df5de6d81a025f2c41f2e0ca51813d548f4712151d4ae2b2b020e962273b47db170daa6b879a002164c47e88c69e56490ad463e431e2b7755d81efde3b243f138dba7c856e0e5a0479ad7be1756d964c6816c9de29c7f52169221bd9c2bc99de9a7ffd18d43bbdfa0c7cea6015ff1827b334cb60fe117e3cf7bb807ff8d764d258f8c0625b5aed760a0e008251981b747a6c7af1b0c2275ef05560f23dc0f2c06033bdcbb3e0252b09aa00ad5f3b7e8211514fda5f533f7a8005244631e6154627583a0eb07578e413a27a0994558db4bda289cd8fe2bd31998735644b1187767df51bfbaff763079967650a0748842db446e85dbee1d0ac949dd592e251c0943454b0ca592af371deff77a18a05ce9c74b0e505fa22c3ff2a287de96c56195d984c33e120ff4f09295df4cdf07a02a29722c78668af7f1512c0f126b99f7030621da7e12c805b8556b84398e5c7680808080b9032df9032a20b9032602f9032201832afdcab9010000000000000000908000000008000000000000080000800000008000102000000801000000000000000000000000000080000000000000000000000000000800000000000000000000000000000000000000080000000000000000020000080000000000000000000000020000200000000000000000002000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000200000000001000000000000000000000001000000000000000000000000000000000080000000000000000000000000000400000000000000000000000000000000000000000020000000000400000f90217f9013d94ffaef09b3cd11d9b20d1a19becca54eec2884766f884a0769f711d20c679153d382254f59892613b58a97cc876b249134ac25c80f9c814a00000000000000000000000004366e0c6ed744390ef6da1cd3888ff476b088e2da00000000000000000000000000000000000000000000000000000000000004268a000000000000000000000000086fb9f1c124fb20ff130c41a79a432f770f67afdb8a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005303000ccd4700aa36a70000000000000000000000004366e0c6ed744390ef6da1cd3888ff476b088e2d0000426800000000000000000000000086fb9f1c124fb20ff130c41a79a432f770f67afd48656c6c6f2100000000000000000000000000f85a94ffaef09b3cd11d9b20d1a19becca54eec2884766f842a0788dbc1b7152732178210e7f4d9d010ef016f9eafbe66786bd7169f56e0c353aa0c757038ac6d08aff4391dea18ebf57b4dc9dbeac9e7d061d6241d5187bb7214a80f879944917a9746a7b6e0a57159ccb7f5a6744247f2d0de1a0253a3a04cab70d47c1504809242d9350cd81627b4f1d50753e159cf8cd76ed33b840c757038ac6d08aff4391dea18ebf57b4dc9dbeac9e7d061d6241d5187bb7214a00000000000000000000000000000000000000000000000000000000000cccca";
        bytes
            memory blockHeaderRlp = hex"f90258a0a8f9eac58229c704d7c04723e5e38ab2dcd21cf61130b3645e5fdd1e8462d5a9a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794c6e2459991bfe27cca6d86722f35da23a1e4cb97a04fa8f1eb80299bc4ab5ff8b18b88bb775aea2c9f5849f64368a05b222d3b0390a00ec74dd216b79b3be94a7e3c3acb495633257e38dbf673ef9f28650a0081667aa004819b6ba679b337f16987b4bb8a271f15238c9738291fa3a181376c6fbb5bc7b90100000000004408c0908010000a0a00200800008108000380048001880014200044088180000084001004001000210400888410000200000400000330042400081400080000000440424000000a000000400412080204001000000008020000181200100000020020c10022060010202b00000800c0000048200100021c00440001022081400080210020000100012000c00001cc0000400200400100000c00100022080800000040010a0100040101000c06064028000410010280002200020520810210020000120001400008da024000604c0408000280010102402000102008000040046108200060001000200000040000000008000002040008004855000480836891808401c9c3808398ce4e846708619891726574682f76312e302e382f6c696e7578a0a6c1b47a6c50f8d7e7bedfff90c48e1e24a1fac59ed6c46b2f603f8eece076f188000000000000000084126f5271a020c745115d6bf1c08333ff38c1a535ca27869af7bedd7483f63e4ffa40af629f8304000080a0fc181402f70616d31c2b540f1a2d7d411f0224ea24b8f3e753282f8dd0d9ae21";

        uint256 logIndex = 0;

        bytes memory metadata = (
            abi.encode(mptKey, proof, blockHeaderRlp, logIndex)
        );
        bytes
            memory message = hex"03000CCD4700AA36A70000000000000000000000004366E0C6ED744390EF6DA1CD3888FF476B088E2D0000426800000000000000000000000086FB9F1C124FB20FF130C41A79A432F770F67AFD48656C6C6F21";

        bool res = ism.verify(metadata, message);
        console.log("BACK IN TESET");
        console.log(res);
    }
}
